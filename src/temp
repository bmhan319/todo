 To do
1) Fix filter function
2) Make code more efficient


***********************
App.js
***********************

import React, { Component } from 'react'
import Header from './components/Header'
import ToDo from './components/ToDo'
import './css/header.css'
import './css/todo.css'

export default class App extends Component {
  state= {
    isDark: true,
    mode: 'Night',
    input: "",
    list: [],
  }

  handleChange = (event) => {
    this.setState({
      input: event.target.value
    })
  }

  handleSubmit = (event) => {
    const inputError = document.querySelector('.inputError')
    event.preventDefault()
    document.querySelector('.emptyList').style.display = "none"

    if (this.state.input === "") {
      inputError.classList.remove('inputErrorOff')
      inputError.classList.add('inputErrorOn')
      document.querySelector('.listInputContainer').style.border = "2px solid orange"
    } else {
      inputError.classList.remove('inputErrorOn')
      inputError.classList.add('inputErrorOff')
      document.querySelector('.listInputContainer').style.border = "0"
      document.querySelectorAll('.sortText').forEach(item=>{
        item.style.color = "var(--DT_Gray)"
      })
      document.querySelectorAll('.listItem').forEach(item=>{
        item.style.display = "flex"
      })
      document.querySelector('.sortAll').style.color = "var(--Blue)"
      
      this.setState({
        list: [...this.state.list, {
          'todo': this.state.input,
          'status': 'notDone',
          'stroke': 'strokeOff',
          'listComplete': "listNotComplete",
          'strikeThrough': 'strikeOff',
          'display': 'flex',
          'innerBG': 'visible'
        }]
      })
      document.getElementById('listInput').value = ""
    }
    this.setState({
      input: ""
    })
  }

  close = (num) => {
    let array = [...this.state.list]
    array.splice(num, 1)
    this.setState({
      list: array
    })
  }

  complete = (num) => {
    let dupeArray = [...this.state.list]
    
    document.querySelector('.listItemPath' + num).classList.remove(dupeArray[num].stroke)
    document.querySelector('.listComplete' + num).classList.remove(dupeArray[num].listComplete)
    document.querySelector('.listItemSubject' + num).classList.remove(dupeArray[num].strikeThrough)
    document.querySelector('.innerButton' + num).classList.remove(dupeArray[num].innerBg)

    dupeArray[num].status = (document.querySelector('.listItem' + num).dataset.status === 'notDone') ? "done" : "notDone"
    dupeArray[num].stroke = (document.querySelector('.listItem' + num).dataset.status === 'notDone') ? "strokeOn" : "strokeOff"
    dupeArray[num].listComplete = (document.querySelector('.listItem' + num).dataset.status === 'notDone') ? "listComplete" : "listNotComplete"
    dupeArray[num].strikeThrough = (document.querySelector('.listItem' + num).dataset.status === 'notDone') ? "strikeOn" : "strikeOff"
    dupeArray[num].innerBg = (document.querySelector('.listItem' + num).dataset.status === 'notDone') ? "buttonVisible" : "buttonInvisible"
    
    this.setState({
      list: dupeArray
    })

    document.querySelector('.listItemPath' + num).classList.add(this.state.list[num].stroke)   
    document.querySelector('.listComplete' + num).classList.add(this.state.list[num].listComplete)
    document.querySelector('.listItemSubject' + num).classList.add(this.state.list[num].strikeThrough)
    document.querySelector('.innerButton' + num).classList.add(this.state.list[num].innerBg)
  }

  filter = (status) => {
    let dupeArray = [...this.state.list]
    let items = document.querySelectorAll('.listItem')
    document.querySelectorAll('.sortText').forEach( item => {
      item.style.color = "var(--DT_Gray)"
    })
    dupeArray.forEach( item => {
      item.display = 'flex'
    })

    if (status === 'Active') {
      document.querySelector('.sortActive').style.color = "var(--Blue)"
      items.forEach( (item, ind) => {
        if (item.dataset.status === "done") {
          dupeArray[ind].display = "none"
        }
      } )
    } else if (status === 'Complete') {
      document.querySelector('.sortCompleted').style.color = "var(--Blue)"
      items.forEach( (item, ind) => {
        if (item.dataset.status === "notDone") {
          dupeArray[ind].display = "none"
        }
      } )
    } else if (status === 'All') {
      document.querySelector('.sortAll').style.color = "var(--Blue)"
      items.forEach( item => {
        dupeArray.display = "flex"
      } )
    } else if (status === "Clear") {
      document.querySelector('.sortAll').style.color = "var(--Blue)"
      for (let i = dupeArray.length - 1; i >= 0; i--) {
        if (dupeArray[i].status === "done") {
          dupeArray.splice(i, 1)
        }
      }
    }

    this.setState({
      list: dupeArray
    })
  }

  changeMode = () => {
    this.setState({
      isDark: !this.state.isDark
    })
    if(this.state.isDark === false) {
      document.querySelector('.listMode').classList.remove('nightIcon')
      document.querySelector('.listMode').classList.add('dayIcon')
      document.querySelector('.headerContainer').classList.remove('headerDay')
      document.querySelector('.headerContainer').classList.add('headerNight')
      document.querySelector('.App').classList.remove('bgDayMode')
      document.querySelector('.App').classList.add('bgNightMode')
      document.querySelector('.emptyList').classList.remove('emptyListDay')
      document.querySelector('.emptyList').classList.add('emptyListNight')
      
      document.querySelectorAll('.tailText').forEach( item => {
        item.classList.remove('tailTextDay')
        item.classList.add('tailTextNight')
      } )
      document.querySelectorAll('.listBg').forEach( item => {
        item.classList.remove('listBgDay')
        item.classList.add('listBgNight')
      } )
      document.querySelectorAll('.listText').forEach( item => {
      item.classList.remove('listTextDay')
      item.classList.add('listTextNight')
      } )
      document.querySelectorAll('.listCheckDesign').forEach( item => {
        item.classList.remove('listDesignDay')
        item.classList.add('listDesignNight') 
      } )
      document.querySelectorAll('.innerButton').forEach( item => {
        item.classList.remove('innerButtonDay')
        item.classList.add('innerButtonNight') 
      } )
      document.querySelectorAll('.listItem').forEach( item => {
        item.classList.remove('listBorderDay')
        item.classList.add('listBorderNight') 
      } )
      document.querySelectorAll('.tailItemText').forEach( item => {
        item.classList.remove('tailItemTextDay')
        item.classList.add('tailItemTextNight') 
      } )
    } else {
      document.querySelector('.listMode').classList.remove('dayIcon')
      document.querySelector('.listMode').classList.add('nightIcon')
      document.querySelector('.headerContainer').classList.remove('headerNight')
      document.querySelector('.headerContainer').classList.add('headerDay')
      document.querySelector('.App').classList.remove('bgNightMode')
      document.querySelector('.App').classList.add('bgDayMode')
      document.querySelector('.emptyList').classList.remove('emptyListNight')
      document.querySelector('.emptyList').classList.add('emptyListDay')
      
      document.querySelectorAll('.tailText').forEach( item => {
        item.classList.remove('tailTextNight')
        item.classList.add('tailTextDay')
      } )
      document.querySelectorAll('.listBg').forEach( item => {
        item.classList.remove('listBgNight')
        item.classList.add('listBgDay')
      } )
      document.querySelectorAll('.listText').forEach( item => {
        item.classList.remove('listTextNight')
        item.classList.add('listTextDay') 
      } )
      document.querySelectorAll('.listCheckDesign').forEach( item => {
        item.classList.remove('listDesignNight')
        item.classList.add('listDesignDay') 
      } )
      document.querySelectorAll('.innerButton').forEach( item => {
        item.classList.remove('innerButtonNight')
        item.classList.add('innerButtonDay') 
      } )
      document.querySelectorAll('.listItem').forEach( item => {
        item.classList.remove('listBorderNight')
        item.classList.add('listBorderDay') 
      } )
      document.querySelectorAll('.tailItemText').forEach( item => {
        item.classList.remove('tailItemTextNight')
        item.classList.add('tailItemTextDay') 
      } )
    }
  }

  render() {
    return (
      <div className="App bgNightMode">
        <Header />
        <ToDo state={this.state} 
              changeMode={this.changeMode} 
              handleChange={this.handleChange} 
              close={this.close} 
              complete={this.complete} 
              handleSubmit={this.handleSubmit} 
              filter={this.filter} />
      </div>
    )
  }
}

***********************
ToDo.js
***********************

import React, { Component } from 'react'

export default class Todo extends Component {
  reset = () => {
    let items = document.querySelectorAll('.listItem')
    if (items.length === 0) {
      document.querySelector('.emptyList').style.display = "flex"
    }
  }

  mode = () => {
    if (this.props.state.isDark === false && document.querySelector('.listItemSubject') != null) {
      document.querySelectorAll('.listItemSubject').forEach( item => {
        item.classList.remove('listTextNight')
        item.classList.add('listTextDay')
      })
      document.querySelectorAll('.listCheckDesign').forEach( item => {
        item.classList.remove('listDesignNight')
        item.classList.add('listDesignDay') 
      } )
      document.querySelectorAll('.innerButton').forEach( item => {
        item.classList.remove('innerButtonNight')
        item.classList.add('innerButtonDay') 
      })
    }
  }

  componentDidUpdate() {
    this.reset()
    this.mode()
  }
  
  render() {
    return (
      <div className="todoComponent">
        <div className="todoContainer">

          <div className="titleContainer">
            <h1 className="listTitle">TODO</h1>
            <div className="listMode dayIcon" onClick={this.props.changeMode}></div>
          </div>

          <form className="listInputContainer inputError inputErrorOff listBg listBgNight" onSubmit={ this.props.handleSubmit }>
            <button className="listCheckDesign listDesignNight listSubmit" type="submit"  >
            <div className="innerButton innerButtonNight">
              <svg className="listSubmitCheck" xmlns="http://www.w3.org/2000/svg" width="11" height="9">
                <path className="strokeOff listSubmitPath" fill="none" stroke="#FFF" strokeWidth="2" d="M1 4.304L3.696 7l6-6"/>
              </svg>
              </div>
            </button>
            <input id="listInput" className="listInput listText listTextNight listBg listBgNight" onChange={ this.props.handleChange } type="text" placeholder="Create a new todo..." />
          </form>

          <ul className="listContainer listBg listBgNight">
            <li className="listBorderNight emptyListNight emptyList">
              You have no tasks on your To-do list. Yeah! <br />
              Add a task in the input form above.
            </li>
            { this.props.state.list.map( (item,ind) => (
              <li key={ind + item.todo} className={`listItem listBorderNight listItem${ind}`} data-status={item.status} style={{display: item.display}} >
                <button className={`listCheckDesign listDesignNight listItemComplete ${item.listComplete} listComplete${ind}`} type="button" onClick={ ()=>{this.props.complete(ind)} } >
                  <div className={`innerButton innerButton${ind} innerButtonNight`} >
                  <svg className="listItemCheck" xmlns="http://www.w3.org/2000/svg" width="11" height="9">
                    <path className={`${item.stroke} listItemPath listItemPath${ind}`} fill="none" stroke="#FFF" strokeWidth="2" d="M1 4.304L3.696 7l6-6"/>
                  </svg>
                  </div>
                </button>
                <p className={`${item.strikeThrough} listItemSubject listItemSubject${ind} listText listTextNight`} >{item.todo}</p>
                <div className="closeIcon" onClick={ ()=>{this.props.close(ind)} } ></div>
              </li>
            ) ) }
            
            <li className="listTailItem">
              <p className="tailItemText tailItemTextNight itemsLeft">{this.props.state.list.length} items left</p>
              <p  onClick={ ()=>{this.props.filter('Clear')} } className="tailItemText tailItemTextNight completedItemsClear tailText tailTextNight">Clear Completed</p>
              <div className="sortContainer listBg listBgNight">
                <div className="sortTextContainer">
                  <p onClick={ ()=>{this.props.filter('All')} } className="sortText tailText tailTextNight sortAll">All</p>
                  <p onClick={ ()=>{this.props.filter('Active')} } className="sortText tailText tailTextNight sortActive">Active</p>
                  <p onClick={ ()=>{this.props.filter('Complete')} } className="sortText tailText tailTextNight sortCompleted">Completed</p>
                </div> 
              </div>
            </li>

          </ul>

          
        </div>
      </div>
    )
  }
}

***********************
Todo.css
***********************

.todoComponent {
  position: absolute;
  top: 48px;
  left: 0;
  right: 0;
  padding: 0 24px;
}

/* List Title */
.titleContainer {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 36px;
}

.listTitle {
  color: #fff;
  letter-spacing: 12px;
  font-weight: 600;
  font-size: 1.4em;
}

.listMode {
  width: 20px;
  height: 20px;
  background-repeat: no-repeat;
  background-size: 100%;
  background-position: center;
  cursor: pointer;
}

.dayIcon {
  background-image: url('../img/icon-sun.svg');
}

.nightIcon {
  background-image: url('../img/icon-moon.svg');
}

/* Global List Styles */
.listCheckDesign {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 0;
  margin-right: 12px;
  color: transparent;
  outline: none;
  cursor: pointer;
  position: relative;
}

.innerButton {
  width: 16px;
  height: 16px;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


.strokeOff { 
  stroke: none;
}

.strokeOn {
  stroke: auto;
}

.listBgNight {
  background-color: var(--DT_DarkBlueDeSat);
}

.listBgDay {
  background-color: var(--LT_White);
}

.listTextNight {
  color: var(--DT_LightGray);
}

.listTextDay {
  color: var(--LT_DarkGray)!important;
}

.listTextDay::placeholder {
  color: var(--LT_Gray)!important;
}

.listDesignNight {
  background-color: var(--DT_DarkestGray);
}

.innerButtonNight {
  background-color: var(--DT_DarkBlueDeSat);
}

.listDesignNight:hover,
.listDesignDay:hover {
  background-image: linear-gradient(to bottom right , var(--CheckBg1), var(--CheckBg2));
}

.listDesignDay {
  border-color: var(--LT_LighterGray);
}

.innerButtonDay {
  background-color: var(--LT_White);
}

.buttonVisible {
  background-color: transparent; 
}

.buttonInvisible {
  background-color: auto; 
}

.listBorderNight {
  border-bottom-color: var(--DT_DarkestGray);
}

.listBorderDay {
  border-bottom-color: var(--LT_LighterGray);
}

.tailItemTextNight {
  color: var(--DT_DarkerGray);
}

.tailItemTextDay {
  color: var(--LT_Gray);
}

/* Input */
.listInputContainer {
  border-radius: 4px;
  padding: 14px 20px;
  margin-bottom: 16px;
}

.listComplete {
  border: 0;
  background-image: linear-gradient(to bottom right , var(--CheckBg1), var(--CheckBg2));
}

.listNotComplete {
  background-image: auto;
}

.listInput {
  width: 85%;
  border: 0;
  font-size: .7em;
}

.listInput:focus {
  outline: none;
}

/* Empty List */
.emptyList {
  line-height: 24px;
  font-size: .9em;
  display: flex;
  padding: 16px 20px;
  border-width: 1px;
  border-style: solid;
  border-top: 0;
  border-left: 0;
  border-right: 0;
  position: relative;
  align-items: center;
}

.emptyListNight {
  color: var(--DT_LightGray);
}

.emptyListDay {
  color: var(--LT_DarkGray);
}

/* List */
.listContainer {
  border-radius: 4px;
  list-style: none;
  margin-bottom: 12px;
}

.listItem {
  display: flex;
  padding: 16px 20px;
  border-width: 1px;
  border-style: solid;
  border-top: 0;
  border-left: 0;
  border-right: 0;
  position: relative;
  align-items: center;
}

.listItemSubject {
  font-size: .7em;
}

.strikeOff {
  text-decoration: none;
  color: var(--DT_LightGray);
}

.strikeOn {
  text-decoration: line-through;
  color: var(--LT_DarkGray);
}

.closeIcon {
  width: 12px;
  height: 12px;
  background-image: url('../img/icon-cross.svg');
  background-position: center;
  background-size: 100%;
  position: absolute;
  right: 20px;
  opacity: 0;
  cursor: pointer;
}

.listItem:hover .closeIcon {
  opacity: 1;
}

.listTailItem {
  display: flex;
  padding: 20px;
  justify-content: space-between;
  position: relative;
}

.tailItemText {
  font-size: .7em;
}

/* Filter */
.sortContainer {
  border-radius: 4px;
  position: absolute;
  bottom: -72px;
  left: 0;
  right: 0;
}

.sortTextContainer {
  display: flex;
  border-radius: 4px;
  padding: 20px 60px;
  align-items: center;
  justify-content: space-between;
}

.sortText {
  color: var(--DT_Gray);
  font-size: .8em;
}

.tailTextNight:hover {
  color: var(--DT_LightGray)!important;
  cursor: pointer;
}

.tailTextDay:hover {
  color: var(--LT_DarkGray)!important;
  cursor: pointer;
}


@media screen and (min-width: 500px) {
  .todoComponent {
    top: 78px;
    width: 100%;
    max-width: 540px;
    margin: 0 auto;
  }

  /* List Title */
  .titleContainer {
    margin-bottom: 48px;
  }

  .listTitle {
    font-size: 2.2em;
    letter-spacing: 14px;
  }

  .listMode {
    width: 28px;
    height: 28px;
  }

  /* Input */
  .listInputContainer {
    padding: 22px 24px;
    margin-bottom: 22px;
    position: relative;
  }

  .inputError::after {
    content: "Enter a valid list item";
    color: orange;
    font-size: .7em;
    font-style: italic;
    position: absolute;
    bottom: 4px;
    left: 72px;
  }

  .inputErrorOff::after {
    visibility: hidden;
  }

  .inputErrorOn::after {
    visibility: visible;
  }


  .listCheckDesign {
    width: 24px;
    height: 24px;
    margin-right: 24px;
  }

  .listInput {
    font-size: .9em;
  }

  /* List */
  .listItem {
    padding: 22px 24px;
  }
  
  .listItemSubject {
    font-size: .9em;
  }
  
  .closeIcon {
    width: 20px;
    height: 20px;
    right: 24px;
  }

  /* Filter */
  .sortContainer {
    border-radius: 4px;
    position: absolute;
    bottom: 50%;
    left: 30%;
    right: 36%;
    transform: translateY(50%);
  }

  .sortTextContainer {
    padding: 0px 0px;
    align-items: center;
    justify-content: space-between;
  }

  .tailItemText {
    font-size: .8em;
    font-weight: 400;
  }

  .sortText{
    font-size: .85em;
    font-weight: 600;
  }
}


***********************
***********************
***********************

{ this.props.state.list.map( (item,ind) => (
  <li key={ind + item.todo} className={`listItem listBorderNight listItem${ind}`} data-status={item.status} style={{display: item.display}} >
    <button className={`listCheckDesign listDesignNight listItemComplete ${item.listComplete} listComplete${ind}`} type="button" onClick={ ()=>{this.props.complete(ind)} } >
      <svg className="listItemCheck" xmlns="http://www.w3.org/2000/svg" width="11" height="9">
        <path className={`${item.stroke} listItemPath listItemPath${ind}`} fill="none" stroke="#FFF" strokeWidth="2" d="M1 4.304L3.696 7l6-6"/>
      </svg>
    </button>
    <p className={`${item.strikeThrough} listItemSubject listItemSubject${ind} listText listTextNight`} >{item.todo}</p>
    <div className="closeIcon" onClick={ ()=>{this.props.close(ind)} } ></div>
  </li>
) ) }

.listCheckDesign {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  margin-right: 12px;
  color: transparent;
  background-color: transparent;
  border-width: 2px;
  border-style: solid;
  outline: none;
  cursor: pointer;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}


.todoComponent {
  position: absolute;
  top: 48px;
  left: 0;
  right: 0;
  padding: 0 24px;
}

/* List Title */
.titleContainer {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 36px;
}

.listTitle {
  color: #fff;
  letter-spacing: 12px;
  font-weight: 600;
  font-size: 1.4em;
}

.listMode {
  width: 20px;
  height: 20px;
  background-repeat: no-repeat;
  background-size: 100%;
  background-position: center;
  cursor: pointer;
}

.dayIcon {
  background-image: url('../img/icon-sun.svg');
}

.nightIcon {
  background-image: url('../img/icon-moon.svg');
}

/* Global List Styles */
.listCheckDesign {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  margin-right: 12px;
  color: transparent;
  background-color: green;
  border-width: 2px;
  border-style: solid;
  outline: none;
  cursor: pointer;
  position: relative;
}

.innerButton {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background-color: red;
}


.strokeOff { 
  stroke: none;
}

.strokeOn {
  stroke: auto;
}

.listBgNight {
  background-color: var(--DT_DarkBlueDeSat);
}

.listBgDay {
  background-color: var(--LT_White);
}

.listTextNight {
  color: var(--DT_LightGray);
}

.listTextDay {
  color: var(--LT_DarkGray)!important;
}

.listTextDay::placeholder {
  color: var(--LT_Gray)!important;
}

.listDesignNight {
  border-color: var(--DT_DarkestGray);
}

.listDesignNight:hover,
.listDesignDay:hover {
  border-image-source: linear-gradient(to bottom right , var(--CheckBg1), var(--CheckBg2));
  border-image-slice: 1;
}

.listDesignDay {
  border-color: var(--LT_LighterGray);
}

.listBorderNight {
  border-bottom-color: var(--DT_DarkestGray);
}

.listBorderDay {
  border-bottom-color: var(--LT_LighterGray);
}

.tailItemTextNight {
  color: var(--DT_DarkerGray);
}

.tailItemTextDay {
  color: var(--LT_Gray);
}

/* Input */
.listInputContainer {
  border-radius: 4px;
  padding: 14px 20px;
  margin-bottom: 16px;
}

.listComplete {
  border: 0;
  background-image: linear-gradient(to bottom right , var(--CheckBg1), var(--CheckBg2));
}

.listNotComplete {
  background-image: auto;
}

.listInput {
  width: 85%;
  border: 0;
  font-size: .7em;
}

.listInput:focus {
  outline: none;
}

/* Empty List */
.emptyList {
  line-height: 24px;
  font-size: .9em;
  display: flex;
  padding: 16px 20px;
  border-width: 1px;
  border-style: solid;
  border-top: 0;
  border-left: 0;
  border-right: 0;
  position: relative;
  align-items: center;
}

.emptyListNight {
  color: var(--DT_LightGray);
}

.emptyListDay {
  color: var(--LT_DarkGray);
}

/* List */
.listContainer {
  border-radius: 4px;
  list-style: none;
  margin-bottom: 12px;
}

.listItem {
  display: flex;
  padding: 16px 20px;
  border-width: 1px;
  border-style: solid;
  border-top: 0;
  border-left: 0;
  border-right: 0;
  position: relative;
  align-items: center;
}

.listItemSubject {
  font-size: .7em;
}

.strikeOff {
  text-decoration: none;
  color: var(--DT_LightGray);
}

.strikeOn {
  text-decoration: line-through;
  color: var(--LT_DarkGray);
}

.closeIcon {
  width: 12px;
  height: 12px;
  background-image: url('../img/icon-cross.svg');
  background-position: center;
  background-size: 100%;
  position: absolute;
  right: 20px;
  opacity: 0;
  cursor: pointer;
}

.listItem:hover .closeIcon {
  opacity: 1;
}

.listTailItem {
  display: flex;
  padding: 20px;
  justify-content: space-between;
  position: relative;
}

.tailItemText {
  font-size: .7em;
}

/* Filter */
.sortContainer {
  border-radius: 4px;
  position: absolute;
  bottom: -72px;
  left: 0;
  right: 0;
}

.sortTextContainer {
  display: flex;
  border-radius: 4px;
  padding: 20px 60px;
  align-items: center;
  justify-content: space-between;
}

.sortText {
  color: var(--DT_Gray);
  font-size: .8em;
}

.tailTextNight:hover {
  color: var(--DT_LightGray)!important;
  cursor: pointer;
}

.tailTextDay:hover {
  color: var(--LT_DarkGray)!important;
  cursor: pointer;
}


@media screen and (min-width: 500px) {
  .todoComponent {
    top: 78px;
    width: 100%;
    max-width: 540px;
    margin: 0 auto;
  }

  /* List Title */
  .titleContainer {
    margin-bottom: 48px;
  }

  .listTitle {
    font-size: 2.2em;
    letter-spacing: 14px;
  }

  .listMode {
    width: 28px;
    height: 28px;
  }

  /* Input */
  .listInputContainer {
    padding: 22px 24px;
    margin-bottom: 22px;
    position: relative;
  }

  .inputError::after {
    content: "Enter a valid list item";
    color: orange;
    font-size: .7em;
    font-style: italic;
    position: absolute;
    bottom: 4px;
    left: 72px;
  }

  .inputErrorOff::after {
    visibility: hidden;
  }

  .inputErrorOn::after {
    visibility: visible;
  }


  .listCheckDesign {
    width: 24px;
    height: 24px;
    margin-right: 24px;
  }

  .listInput {
    font-size: .9em;
  }

  /* List */
  .listItem {
    padding: 22px 24px;
  }
  
  .listItemSubject {
    font-size: .9em;
  }
  
  .closeIcon {
    width: 20px;
    height: 20px;
    right: 24px;
  }

  /* Filter */
  .sortContainer {
    border-radius: 4px;
    position: absolute;
    bottom: 50%;
    left: 30%;
    right: 36%;
    transform: translateY(50%);
  }

  .sortTextContainer {
    padding: 0px 0px;
    align-items: center;
    justify-content: space-between;
  }

  .tailItemText {
    font-size: .8em;
    font-weight: 400;
  }

  .sortText{
    font-size: .85em;
    font-weight: 600;
  }
}








handleChange = (event) => {
  this.setState({
    input: event.target.value
  })
}

handleSubmit = (event) => {
  event.preventDefault()
  this.setState({
    list: [...this.state.list, this.state.input]
  })
  document.getElementById('listInput').value = ""
}

close = (num) => {
  let array = [...this.state.list]
  array.splice(num, 1)
  this.setState({
    list: array
  })
}

complete = (num) => {
  if (document.querySelector('.listItem' + num).dataset.status === 'notDone') {
    document.querySelector('.listItemPath' + num).classList.remove('strokeOff')
    document.querySelector('.listItemPath').classList.add('strokeOn')
    document.querySelector('.listItem' + num).dataset.status = 'done'
    document.querySelector('.listComplete' + num).classList.add('listComplete')
    document.querySelector('.listItemSubject' + num).style.textDecoration = 'line-through'

    document.querySelector('.listItemSubject' + num).style.color = 'var(--LT_DarkGray)'
  } else if (document.querySelector('.listItem' + num).dataset.status === 'done') {
    document.querySelector('.listItemPath' + num).classList.remove('strokeOn')
    document.querySelector('.listItemPath' + num).classList.add('strokeOff')
    document.querySelector('.listItem' + num).dataset.status = 'notDone'
    document.querySelector('.listComplete' + num).classList.remove('listComplete')
    document.querySelector('.listItemSubject' + num).style.textDecoration = 'none'

    document.querySelector('.listItemSubject' + num).style.color = 'var(--DT_LightGray)'
  }
  
  
}

changeMode = (num) => {
  this.setState({
    modeCount: this.state.modeCount + num
  })
  if(this.state.modeCount % 2 !== 0) {
    document.querySelector('.listMode').classList.remove('nightIcon')
    document.querySelector('.listMode').classList.add('dayIcon')
    document.querySelector('.headerContainer').classList.remove('headerDay')
    document.querySelector('.headerContainer').classList.add('headerNight')
    document.querySelector('.App').classList.remove('bgDayMode')
    document.querySelector('.App').classList.add('bgNightMode')
    
    document.querySelectorAll('.tailText').forEach( item => {
      item.classList.remove('tailTextDay')
      item.classList.add('tailTextNight')
     } )
    document.querySelectorAll('.listBg').forEach( item => {
      item.classList.remove('listBgDay')
      item.classList.add('listBgNight')
     } )
    document.querySelectorAll('.listText').forEach( item => {
    item.classList.remove('listTextDay')
    item.classList.add('listTextNight')
    } )
    document.querySelectorAll('.listCheckDesign').forEach( item => {
      item.classList.remove('listDesignDay')
      item.classList.add('listDesignNight') 
    } )
    document.querySelectorAll('.listItem').forEach( item => {
      item.classList.remove('listBorderDay')
      item.classList.add('listBorderNight') 
    } )
    document.querySelectorAll('.tailItemText').forEach( item => {
      item.classList.remove('tailItemTextDay')
      item.classList.add('tailItemTextNight') 
    } )
  } else {
    document.querySelector('.listMode').classList.remove('dayIcon')
    document.querySelector('.listMode').classList.add('nightIcon')
    document.querySelector('.headerContainer').classList.remove('headerNight')
    document.querySelector('.headerContainer').classList.add('headerDay')
    document.querySelector('.App').classList.remove('bgNightMode')
    document.querySelector('.App').classList.add('bgDayMode')
    
    document.querySelectorAll('.tailText').forEach( item => {
      item.classList.remove('tailTextNight')
      item.classList.add('tailTextDay')
    } )
    document.querySelectorAll('.listBg').forEach( item => {
      item.classList.remove('listBgNight')
      item.classList.add('listBgDay')
    } )
    document.querySelectorAll('.listText').forEach( item => {
      item.classList.remove('listTextNight')
      item.classList.add('listTextDay') 
    } )
    document.querySelectorAll('.listCheckDesign').forEach( item => {
      item.classList.remove('listDesignNight')
      item.classList.add('listDesignDay') 
    } )
    document.querySelectorAll('.listItem').forEach( item => {
      item.classList.remove('listBorderNight')
      item.classList.add('listBorderDay') 
    } )
    document.querySelectorAll('.tailItemText').forEach( item => {
      item.classList.remove('tailItemTextNight')
      item.classList.add('tailItemTextDay') 
    } )
  }
}





{ this.props.state.list.map( (item,ind) => (
  <li key={ind + item} className={`listItem listBorderNight listItem${ind}`} data-status='notDone' >
    <button className={`listCheckDesign listDesignNight listItemComplete listComplete${ind}`} type="button" onClick={ ()=>{this.props.complete(ind)} } >
      <svg className="listItemCheck" xmlns="http://www.w3.org/2000/svg" width="11" height="9">
        <path className={`strokeOff listItemPath listItemPath${ind}`} fill="none" stroke="#FFF" strokeWidth="2" d="M1 4.304L3.696 7l6-6"/>
      </svg>
    </button>
    <p className={`listItemSubject listItemSubject${ind} listText listTextNight`} >{item}</p>
    <div className="closeIcon" onClick={ ()=>{this.props.close(ind)} } ></div>
  </li>
) ) }